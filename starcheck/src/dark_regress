#! /bin/sh

# Comprehensive regression tests for starcheck

RunRegression()
# Run regression tests.
# Arg 1 is the AGASC version (e.g. 1p5)
# Arg 2 is the fid characteristics name (e.g. fid_CHARACTERIS_FEB07)
{
  echo ""
  echo "***** Running starcheck on load $load *****"

  agasc=${1}
  fid_char=${2}

  test=$regtestdir/$load
  release=$home/test_regress/release/$load

  # Make sure we have a clean test directory
  if [ -d $test ]
  then
    echo "rm -r $test"
    rm -r $test
  fi

  echo "mkdir -p $test"
  mkdir -p $test

  # Vehicle Block

  if [ -d $mphome/$load/vehicle ]
  then
    echo "cd $test"
    cd $test


  # Run test version.  Use the 'starcheck' launcher to activate the dev environment
  #
    echo "Running: ${home}/sandbox_starcheck -vehicle -agasc $agasc -fid_char $fid_char -dir $mphome/$load"
    echo "******************** (TEST VEHICLE) $load *******************" >> $vlog
    ${home}/sandbox_starcheck -vehicle -agasc $agasc -fid_char $fid_char -dir $mphome/$load 2>&1| tee -a $vlog
    # cut first 4 lines and replace test ska with release to make cleaner diffs
    perl -n -i.bak -e 'print if $. > 3' $test/v_starcheck.txt
    perl -p -i -e "s{$SKA}{$RELEASE}" $test/v_starcheck.txt
    perl -p -i -e "s{$local_data}{$release_data}" $test/v_starcheck.txt

  # Now run current release version if not already there
  #
    if [ ! -r $release/v_starcheck.txt ]
    then
      echo "mkdir -p $release"
      mkdir -p $release
      
      echo "cd $release"
      cd $release
      
      echo "Running: $RELEASE/bin/starcheck -vehicle -agasc $agasc -fid_char $fid_char -dir $mphome/$load"
      echo "**** (RELEASE VEHICLE) $load ****" >> $vlog
      env SKA=$RELEASE PERL5LIB='' SYBASE='' SYBASE_OCS='' $RELEASE/bin/starcheck -vehicle -agasc $agasc -fid_char $fid_char -dir $mphome/$load 2>&1| tee -a $vlog
      perl -n -i.bak -e 'print if $. > 3' $release/v_starcheck.txt
    fi  


  # Now compare with release version
    
    echo "diff -u $release/v_starcheck.txt $test/v_starcheck.txt >> $vdiffs"
    echo "********************* $load vehicle ********************" >> $vdiffs
    diff -u $release/v_starcheck.txt $test/v_starcheck.txt >> $vdiffs
  fi

  echo "cd $test"
  cd $test

  # Run test version.  Use the 'starcheck' launcher to activate the dev environment
  #
  echo "Running: ${home}/sandbox_starcheck -agasc $agasc -fid_char $fid_char -dir $mphome/$load"
  echo "******************** (TEST) $load *******************" >> $log
  ${home}/sandbox_starcheck -agasc $agasc -fid_char $fid_char -dir $mphome/$load 2>&1| tee -a $log
  # cut first 4 lines and replace test ska with release to make cleaner diffs
  perl -n -i.bak -e 'print if $. > 3' $test/starcheck.txt
  perl -p -i -e "s{$SKA}{$RELEASE}" $test/starcheck.txt
  perl -p -i -e "s{$local_data}{$release_data}" $test/starcheck.txt

  # Now run current release version if not already there
  #
  if [ ! -r $release/starcheck.txt ]
  then
    echo "mkdir -p $release"
    mkdir -p $release

    echo "cd $release"
    cd $release

    echo "Running: $RELEASE/bin/starcheck -agasc $agasc -fid_char $fid_char -dir $mphome/$load"
    echo "**** (RELEASE) $load ****" >> $log
    env SKA=$RELEASE PERL5LIB='' SYBASE='' SYBASE_OCS='' $RELEASE/bin/starcheck -agasc $agasc -fid_char $fid_char -dir $mphome/$load 2>&1| tee -a $log
    perl -n -i.bak -e 'print if $. > 3' $release/starcheck.txt
  fi  


  # Now compare with release version

  echo "diff -u $release/starcheck.txt $test/starcheck.txt >> $diffs"
  echo "********************* $load ********************" >> $diffs
  diff -u $release/starcheck.txt $test/starcheck.txt >> $diffs


  cd $home
}
                                                                                                                                                             

# Define the files and directories
home=$PWD
sha=${1}
regtestdir=$home/test_regress/${sha}


mphome=/data/mpcrit1/mplogs
vlog=$home/vehicle_regress_log
log=$home/regress_log
vdiffs=$home/vehicle_regress_diffs
diffs=$home/regress_diffs

RELEASE=/proj/sot/ska
local_data=$home/starcheck_data
release_data=$RELEASE/data/starcheck

if [ -d $regtestdir ]
then
  echo "*****************************************"
  echo "Regression test output for this code already exists."
  echo "    Delete to rerun regression tests:"
  echo "    rm -r $regtestdir"
  echo "*****************************************"
  exit 1
fi

# Make a file to store the file SHA and the current git commit
if [ -w $regtestdir/version ]
then 
    echo "rm ${regtestdir}/version"
    rm ${regtestdir}/version
fi
mkdir -p $regtestdir
echo "echo 'file SHA: $sha' > ${regtestdir}/version"
echo "file SHA: $sha" >> ${regtestdir}/version
echo "echo -n git commit SHA: >> ${regtestdir}/version"
echo -n "git commit SHA: " >> ${regtestdir}/version
echo "git rev-parse --short HEAD >> ${regtestdir}/version"
git rev-parse --short HEAD >> ${regtestdir}/version
echo "echo -n skare_version:  >> ${regtestdir}/version"
echo -n "skare_version: " >> ${regtestdir}/version
echo "ska_version >> ${regtestdir}/version"
ska_version >> ${regtestdir}/version
echo "echo -n SKA: $SKA > ${regtestdir}/version"
echo "SKA: $SKA"  >> ${regtestdir}/version



# Remove existing log and diffs files
for file in $log $diffs $vlog $vdiffs
do
  if [ -w $file ]
  then
    echo "rm $file"
    rm $file
  fi
done

# Then, a bunch of agasc 1.6 loads with the updated fid characteristics

# Go through specified loads and run test and release starcheck versions
for load in \
    2010/OCT2510/oflsb \
    2015/MAR2315/oflsb \
    2015/SEP2315/oflsa \
    2016/FEB0816/oflsb \
    2016/MAY0216/oflsb \
    2016/JUL0216/oflsb \
    2016/OCT0316/oflsb \
    OFLS_testing/2016/OCT0316/oflsy \
    ofls_regression_testing/2011/JUN2711/oflst \
    ofls_regression_testing/2016/JUN2716/oflsv \
    ofls_regression_testing/2016/JUL0816/oflsu \
    2017/JAN0917/oflsb \
    2017/APR0217/oflsb
do
  RunRegression 1p6 fid_CHARACTERIS_FEB07
done

# Copy log and diffs to version directory
for file in $log $diffs $vlog $vdiffs
do
  if [ -r $file ]
  then
    echo "cp $file $regtestdir"
    cp $file $regtestdir
  fi
done
